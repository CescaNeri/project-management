const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"francescodente/project-management","title":"francescodente/project-management"},{"location":"index.html#francescodenteproject-management","text":"","title":"francescodente/project-management"},{"location":"01_introduzione.html","text":"Introduzione al Project Management Garage e mercato In un garage possono solo nascere idee e prototipi , ma per avere un prodotto sono necessari: analisi dei requisiti/architettura test documentazione piano di manutenzione un business plan (modello di business) Goal e Progetto Goal = cosa deve essere fatto Progetto = come raggiungere il goal La gestione del progetto \u00e8 fondamentale per raggiungere il goal. Cambiamento Per Brooks \u00e8 importante attenersi al risultato dell'analisi iniziale, ma nonostante ci\u00f2 l'unica costante in un progetto \u00e8 il cambiamento ed \u00e8 necessario pianificare il sistema per adattarcisi. Esistono approcci progettuali (e.g. Agile) che assumono che i requisiti possano essere modificati frequentemente in corso d'opera e di conseguenza sono molto flessibili (anche il progetto deve essere sufficientemente flessibile per adattarsi ai cambiamenti). I cambiamenti possono essere a livello di requisiti o a livello di risorse e possono essere dovuti a fattori interni o esterni . \u00c8 importante prevedere i cambiamenti e essere pronti ad affrontarli, poich\u00e8 sono fonte di stress per il personale (tar pit). Complessit\u00e0 Non \u00e8 possibile suddividere progetti complessi in task totalmente indipendenti. Le interrelazioni tra task sono la principale fonte di complessit\u00e0 in un progetto. Inoltre, una buona progettazione permette solo di gestire la complessit\u00e0, non di rimuoverla. Brooks: \"\u00c8 molto pi\u00f9 oneroso realizzare un prodotto che un programma.\" Sistema software = insieme di prodotti che interagiscono tra loro per supportare processi complessi (complessit\u00e0 dell'integrazione/interfacce/input-output). Accidental complexity : dovuta alle tecnologie, pu\u00f2 essere ridotta migliorando le tecnologie. Essential complexity : dovuta al problema, difficile da ridurre. Brooks: Non esiste un silver bullet per ridurre la compessit\u00e0 essenziale. Why does software fail? Mancato rispetto degli obiettivi (integrit\u00e0 concettuale) Errori nelle stime dei tempi Troppo ottimismo Effort != progress Mancato monitoraggio dello stato di avanzamento Aggiunta di personale in corso d'opera Brooks: Gli sviluppatori sono ottimisti. La quantit\u00e0 di risorse allocate determina i costi , ma non la velocit\u00e0 di avanzamento (vedi legge di Masson). I costi per il test sono spesso sottostimati, anche se spesso portano via pi\u00f9 tempo della scrittura del codice principale. Team La corretta composizione del team \u00e8 fondamentale per la riuscita del progetto e dipende dalla metodologia che si intende utilizzare. tradizionale : tante figure molto specializzate (surgical teams) agile : poche figure, tutti devono saper fare tutto (scrum teams) Scrum team Metodologia pi\u00f9 recente per alla gestione dei progetti, in cui l'obiettivo comune del team \u00e8 il successo del progetto. Propone uno sviluppo iterativo e incrementale : ogni iterazione \u00e8 uno sprint con una durata predeterminata. Prevede tre ruoli: Product Owner : responsabile del prodotto e di cosa conterr\u00e0, ma non di come verr\u00e0 realizzato Scrum Master : coach al servizio del team di sviluppo per agevolare la comunicazione e il rispetto degli obiettivi. Team di sviluppo : persone con le competenze per sviluppare la soluzione in autonomia. Composizione dei team \u00c8 importante non avere team di dimensioni troppo grandi, perch\u00e8 richiedono un overhead per la comunicazione. Le dimensioni dei team dovrebbero essere indipendenti dalle dimensioni del progetto (deve sempre esserci un tetto massimo).","title":"Introduzione"},{"location":"01_introduzione.html#introduzione-al-project-management","text":"","title":"Introduzione al Project Management"},{"location":"01_introduzione.html#garage-e-mercato","text":"In un garage possono solo nascere idee e prototipi , ma per avere un prodotto sono necessari: analisi dei requisiti/architettura test documentazione piano di manutenzione un business plan (modello di business)","title":"Garage e mercato"},{"location":"01_introduzione.html#goal-e-progetto","text":"Goal = cosa deve essere fatto Progetto = come raggiungere il goal La gestione del progetto \u00e8 fondamentale per raggiungere il goal.","title":"Goal e Progetto"},{"location":"01_introduzione.html#cambiamento","text":"Per Brooks \u00e8 importante attenersi al risultato dell'analisi iniziale, ma nonostante ci\u00f2 l'unica costante in un progetto \u00e8 il cambiamento ed \u00e8 necessario pianificare il sistema per adattarcisi. Esistono approcci progettuali (e.g. Agile) che assumono che i requisiti possano essere modificati frequentemente in corso d'opera e di conseguenza sono molto flessibili (anche il progetto deve essere sufficientemente flessibile per adattarsi ai cambiamenti). I cambiamenti possono essere a livello di requisiti o a livello di risorse e possono essere dovuti a fattori interni o esterni . \u00c8 importante prevedere i cambiamenti e essere pronti ad affrontarli, poich\u00e8 sono fonte di stress per il personale (tar pit).","title":"Cambiamento"},{"location":"01_introduzione.html#complessita","text":"Non \u00e8 possibile suddividere progetti complessi in task totalmente indipendenti. Le interrelazioni tra task sono la principale fonte di complessit\u00e0 in un progetto. Inoltre, una buona progettazione permette solo di gestire la complessit\u00e0, non di rimuoverla. Brooks: \"\u00c8 molto pi\u00f9 oneroso realizzare un prodotto che un programma.\" Sistema software = insieme di prodotti che interagiscono tra loro per supportare processi complessi (complessit\u00e0 dell'integrazione/interfacce/input-output). Accidental complexity : dovuta alle tecnologie, pu\u00f2 essere ridotta migliorando le tecnologie. Essential complexity : dovuta al problema, difficile da ridurre. Brooks: Non esiste un silver bullet per ridurre la compessit\u00e0 essenziale.","title":"Complessit\u00e0"},{"location":"01_introduzione.html#why-does-software-fail","text":"Mancato rispetto degli obiettivi (integrit\u00e0 concettuale) Errori nelle stime dei tempi Troppo ottimismo Effort != progress Mancato monitoraggio dello stato di avanzamento Aggiunta di personale in corso d'opera Brooks: Gli sviluppatori sono ottimisti. La quantit\u00e0 di risorse allocate determina i costi , ma non la velocit\u00e0 di avanzamento (vedi legge di Masson). I costi per il test sono spesso sottostimati, anche se spesso portano via pi\u00f9 tempo della scrittura del codice principale.","title":"Why does software fail?"},{"location":"01_introduzione.html#team","text":"La corretta composizione del team \u00e8 fondamentale per la riuscita del progetto e dipende dalla metodologia che si intende utilizzare. tradizionale : tante figure molto specializzate (surgical teams) agile : poche figure, tutti devono saper fare tutto (scrum teams)","title":"Team"},{"location":"01_introduzione.html#scrum-team","text":"Metodologia pi\u00f9 recente per alla gestione dei progetti, in cui l'obiettivo comune del team \u00e8 il successo del progetto. Propone uno sviluppo iterativo e incrementale : ogni iterazione \u00e8 uno sprint con una durata predeterminata. Prevede tre ruoli: Product Owner : responsabile del prodotto e di cosa conterr\u00e0, ma non di come verr\u00e0 realizzato Scrum Master : coach al servizio del team di sviluppo per agevolare la comunicazione e il rispetto degli obiettivi. Team di sviluppo : persone con le competenze per sviluppare la soluzione in autonomia.","title":"Scrum team"},{"location":"01_introduzione.html#composizione-dei-team","text":"\u00c8 importante non avere team di dimensioni troppo grandi, perch\u00e8 richiedono un overhead per la comunicazione. Le dimensioni dei team dovrebbero essere indipendenti dalle dimensioni del progetto (deve sempre esserci un tetto massimo).","title":"Composizione dei team"},{"location":"SUMMARY.html","text":"Introduzione","title":"SUMMARY"}]}; var __search = { index: Promise.resolve(local_index) }